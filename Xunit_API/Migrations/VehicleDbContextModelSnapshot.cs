// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xunit_API.Data;

#nullable disable

namespace Xunit_API.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    partial class VehicleDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Xunit_API.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("modelname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ModelId");

                    b.HasIndex("BrandId");

                    b.ToTable("model");
                });

            modelBuilder.Entity("Xunit_API.Models.VehicleType", b =>
                {
                    b.Property<int>("VehicleTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("vehicleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("VehicleTypeId");

                    b.ToTable("vehicletype");
                });

            modelBuilder.Entity("Xunit_API.Models.brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("Xunit_API.Models.Model", b =>
                {
                    b.HasOne("Xunit_API.Models.brand", "vehicle_brands")
                        .WithMany("vehicle_model")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vehicle_brands");
                });

            modelBuilder.Entity("Xunit_API.Models.brand", b =>
                {
                    b.HasOne("Xunit_API.Models.VehicleType", "vehicle_type")
                        .WithMany("vehicle_brands")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("vehicle_type");
                });

            modelBuilder.Entity("Xunit_API.Models.VehicleType", b =>
                {
                    b.Navigation("vehicle_brands");
                });

            modelBuilder.Entity("Xunit_API.Models.brand", b =>
                {
                    b.Navigation("vehicle_model");
                });
#pragma warning restore 612, 618
        }
    }
}
